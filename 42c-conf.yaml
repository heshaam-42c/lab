# This example shows how the OpenAPI files can be discovered
# based on their filenames. The discovery phase will look for
# all files with '.json', '.yaml', and '.yml' extensions in all directories,
# except in the 'foo/' directory. All files in 'foo/' will
# be ignored regardless of their extension.
#
# The 'search' list must contain inclusion patterns followed by any exclusion
# patterns. Each exclusion pattern must start with '!' (exclamation mark).
# Format of the pattern is a glob expression, similar to format in '.gitignore'.
#
# The result of this example and its samples is as follows:
#
# 'Discovered: petstore.yaml, bar/petstore.json '
#
# Files in 'foo/' are not discovered.

#audit:
#  branches:
#    main:
#      discovery:
#        search:
#          - '**/*.json'
#          - '**/*.yaml'
#          - '**/*.yml'
#          - '!foo/**'

audit:
  branches:
    main:
      mapping:
        Pixi/pixi.json: 9273b0fc-ab90-4325-9fcb-a6f504e07840
        #scan-engine/scand-manager.json: e773f4f8-6282-491b-9b7a-227ce15a91b4
  
      discovery: false
      # specify more fail conditions to be checked in addition to the minimum score
      # fail_on:
      #   # fail if the API does not have a valid OpenAPI definition
      #   invalid_contract: true

      #   # fail any issues with severity of 'medium' or higher are detected.
      #   # possible severity levels: critical, high, medium, low, info
      #   severity:
      #     data: critical
      #     security: high

      #   # fail if any of the listed issue IDs are detected
      #   issue_id:
      #     - v3-global-http-clear
      #     - parameter-string-pattern
    NewFeature1:
      mapping:
        Pixi/pixi.json: 9273b0fc-ab90-4325-9fcb-a6f504e07840